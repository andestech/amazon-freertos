/*
 * FreeRTOS Kernel V10.2.0
 * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 * 1 tab == 4 spaces!
 */

#ifndef FREERTOS_CONFIG_H
#define FREERTOS_CONFIG_H

/* Ensure stdint is only used by the compiler, and not the assembler. */
#ifndef __ASSEMBLER__

#include <stdint.h>
extern uint32_t SystemCoreClock;
#endif


/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.
 *
 * See http://www.freertos.org/a00110.html.
 *----------------------------------------------------------*/

#define configCLINT_BASE_ADDRESS			0x00000000

#define configCPU_CLOCK_HZ				(60000000UL )
#define configUSE_TICKLESS_IDLE				0
#define configTICK_RATE_HZ				( ( TickType_t ) 1000 )
#define configUSE_PREEMPTION				1
#define configMAX_PRIORITIES				( 7 )
#ifdef CFG_SIMU
#define configMINIMAL_STACK_SIZE			( 1024 )
#else
#define configMINIMAL_STACK_SIZE			( 256 )
#endif
#define configMAX_TASK_NAME_LEN				( 16 )
#define configUSE_16_BIT_TICKS				0
#define configIDLE_SHOULD_YIELD				1
#define configUSE_TASK_NOTIFICATIONS			1
#define configUSE_MUTEXES				1
#define configUSE_RECURSIVE_MUTEXES			1
#define configUSE_COUNTING_SEMAPHORES			1
#define configQUEUE_REGISTRY_SIZE			10
#define configUSE_QUEUE_SETS				0

/* Memory allocation definitions. */
#define configSUPPORT_STATIC_ALLOCATION			1
#define configSUPPORT_DYNAMIC_ALLOCATION		1
#define configTOTAL_HEAP_SIZE				( ( size_t ) ( 200 * 1024 ) )

/* Hook function definitions. */
#define configUSE_IDLE_HOOK				0
#define configUSE_TICK_HOOK				0
#define configCHECK_FOR_STACK_OVERFLOW			0
#define configUSE_MALLOC_FAILED_HOOK			1
#define configUSE_DAEMON_TASK_STARTUP_HOOK		1

/* Run time and task stats gathering definitions. */
#define configUSE_APPLICATION_TASK_TAG			0
#define configGENERATE_RUN_TIME_STATS			0
#define configUSE_TRACE_FACILITY    			1		// Awareness debugging used
#define configUSE_STATS_FORMATTING_FUNCTIONS		0

/* Co-routine definitions. */
#define configUSE_CO_ROUTINES 				0
#define configMAX_CO_ROUTINE_PRIORITIES			( 2 )

/* Software timer definitions. */
#define configUSE_TIMERS				1
#define configTIMER_TASK_PRIORITY			( configMAX_PRIORITIES - 1 )
#define configTIMER_QUEUE_LENGTH			5
#define configTIMER_TASK_STACK_DEPTH			( configMINIMAL_STACK_SIZE * 4 )

/* Set the following definitions to 1 to include the API function, or zero
to exclude the API function. */
#define INCLUDE_vTaskPrioritySet			1
#define INCLUDE_uxTaskPriorityGet			1
#define INCLUDE_vTaskDelete				1
#define INCLUDE_vTaskCleanUpResources			1
#define INCLUDE_vTaskSuspend				1
#define INCLUDE_vTaskDelayUntil				1
#define INCLUDE_vTaskDelay				1
#define INCLUDE_xTaskGetCurrentTaskHandle		1
#define INCLUDE_xTimerPendFunctionCall			1
#define INCLUDE_eTaskGetState				1
#define INCLUDE_xTaskAbortDelay				1
#define INCLUDE_xTaskGetHandle				1
#define INCLUDE_xSemaphoreGetMutexHolder		1

/* The size of the global output buffer that is available for use when there
are multiple command interpreters running at once (for example, one on a UART
and one on TCP/IP).  This is done to prevent an output buffer being defined by
each implementation - which would waste RAM.  In this case, there is only one
command interpreter running. */
/* The buffer into which output generated by FreeRTOS+CLI is placed.  This must
be at least big enough to contain the output of the task-stats command, as the
example implementation does not include buffer overlow checking. */
#define configCOMMAND_INT_MAX_OUTPUT_SIZE		2096
#define configINCLUDE_QUERY_HEAP_COMMAND		1

/* This file is included from assembler files - make sure C code is not included
in assembler files. */
#ifndef __ASSEMBLER__
	void vAssertCalled( const char * pcFile, unsigned long ulLine );
	void vConfigureTickInterrupt( void );
	void vClearTickInterrupt( void );
	void vPreSleepProcessing( unsigned long uxExpectedIdleTime );
	void vPostSleepProcessing( unsigned long uxExpectedIdleTime );
#endif /* __ASSEMBLER__ */



/* Normal assert() semantics without relying on the provision of an assert.h
header file. */
//#define configASSERT( x )				if( ( x ) == 0 )  TEST_ABORT()
#define configASSERT( x )

#ifndef __ASSEMBLER__
/* The function that implements FreeRTOS printf style output, and the macro
 * that maps the configPRINTF() macros to that function. */
extern void vLoggingPrintf( const char * pcFormat, ... );
#define configPRINTF( X )				vLoggingPrintf X

/* Non-format version thread-safe print */
extern void vLoggingPrint( const char * pcMessage );
#define configPRINT( X )				vLoggingPrint( X )

/* Map the logging task's printf to the board specific output function. */
#include <stdio.h>
#endif

#define configPRINT_STRING( X )				printf( X ); /* FIX ME: Change to your devices console print acceptance function. */
/* Sets the length of the buffers into which logging messages are written - so
 * also defines the maximum length of each log message. */
#define configLOGGING_MAX_MESSAGE_LENGTH		100

/* Set to 1 to prepend each log message with a message number, the task name,
 * and a time stamp. */
#define configLOGGING_INCLUDE_TIME_AND_TASK_NAME	1

/* The priority at which the tick interrupt runs.  This should probably be kept at 1. */
#define configKERNEL_INTERRUPT_PRIORITY			1

/* The maximum interrupt priority from which FreeRTOS API functions can be called.
 * Only API functions that end in ...FromISR() can be used within interrupts. */
#define configMAX_SYSCALL_INTERRUPT_PRIORITY		( 1 << 5 )


/* Application specific definitions follow. **********************************/

/* If configINCLUDE_DEMO_DEBUG_STATS is set to one, then a few basic IP trace
 * macros are defined to gather some UDP stack statistics that can then be viewed
 * through the CLI interface. */
#define configINCLUDE_DEMO_DEBUG_STATS			1

/* Only used when running in the FreeRTOS Windows simulator.  Defines the
 * priority of the task used to simulate Ethernet interrupts. */
#define configMAC_ISR_SIMULATOR_PRIORITY		( configMAX_PRIORITIES - 1 )

/* This demo creates a virtual network connection by accessing the raw Ethernet
 * or WiFi data to and from a real network connection.  Many computers have more
 * than one real network port, and configNETWORK_INTERFACE_TO_USE is used to tell
 * the demo which real port should be used to create the virtual port.  The ports
 * available are displayed on the console when the application is executed.  For
 * example, on my development laptop setting configNETWORK_INTERFACE_TO_USE to 4
 * results in the wired network being used, while setting
 * configNETWORK_INTERFACE_TO_USE to 2 results in the wireless network being
 * used. */
#define configNETWORK_INTERFACE_TO_USE			2L

/* The address of an echo server that will be used by the two demo echo client
 * tasks:
 * http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP_Echo_Clients.html,
 * http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/UDP_Echo_Clients.html. */
#define configECHO_SERVER_ADDR0				192
#define configECHO_SERVER_ADDR1				168
#define configECHO_SERVER_ADDR2				0
#define configECHO_SERVER_ADDR3				105
#define configTCP_ECHO_CLIENT_PORT			45000

/* Default MAC address configuration.  The demo creates a virtual network
 * connection that uses this MAC address by accessing the raw Ethernet/WiFi data
 * to and from a real network connection on the host PC.  See the
 * configNETWORK_INTERFACE_TO_USE definition above for information on how to
 * configure the real network connection to use. */
#define configMAC_ADDR0					0x00
#define configMAC_ADDR1					0x11
#define configMAC_ADDR2					0x22
#define configMAC_ADDR3					0x33
#define configMAC_ADDR4					0x44
#define configMAC_ADDR5					0x21

/* Default IP address configuration.  Used in ipconfigUSE_DHCP is set to 0, or
 * ipconfigUSE_DHCP is set to 1 but a DNS server cannot be contacted. */
#define configIP_ADDR0					172
#define configIP_ADDR1					20
#define configIP_ADDR2					10
#define configIP_ADDR3					10

/* Default gateway IP address configuration.  Used in ipconfigUSE_DHCP is set to
 * 0, or ipconfigUSE_DHCP is set to 1 but a DNS server cannot be contacted. */
#define configGATEWAY_ADDR0				172
#define configGATEWAY_ADDR1				20
#define configGATEWAY_ADDR2				10
#define configGATEWAY_ADDR3				1
/* Default DNS server configuration.  OpenDNS addresses are 208.67.222.222 and
 * 208.67.220.220.  Used in ipconfigUSE_DHCP is set to 0, or ipconfigUSE_DHCP is
 * set to 1 but a DNS server cannot be contacted.*/
#define configDNS_SERVER_ADDR0				8
#define configDNS_SERVER_ADDR1				8
#define configDNS_SERVER_ADDR2				8
#define configDNS_SERVER_ADDR3				8
/*
#define configDNS_SERVER_ADDR0			208
#define configDNS_SERVER_ADDR1			67
#define configDNS_SERVER_ADDR2			222
#define configDNS_SERVER_ADDR3			222
*/
/* Default netmask configuration.  Used in ipconfigUSE_DHCP is set to 0, or
 * ipconfigUSE_DHCP is set to 1 but a DNS server cannot be contacted. */
#define configNET_MASK0					255
#define configNET_MASK1					255
#define configNET_MASK2					255
#define configNET_MASK3					240

/* The UDP port to which print messages are sent. */
#define configPRINT_PORT				( 15000 )

#define configPROFILING					( 0 )

#ifndef __ASSEMBLER__
/* Pseudo random number generater used by some demo tasks. */
extern uint32_t ulRand();
#define configRAND32()					ulRand()
#endif

/* FIX ME: The platform FreeRTOS is running on. */
#define configPLATFORM_NAME				"Corvette-F1 N25"
#define ANDESPLAT

/* Header required for the tracealyzer recorder library. */
/* #include "trcRecorder.h" */

/****** Hardware/compiler specific settings. *******************************************/

/* The following constant describe the hardware */
#define configMTIME_BASE_ADDRESS			( 0xE6000000 )

#if 0
/*
 * The application must provide a function that configures a peripheral to
 * create the FreeRTOS tick interrupt, then define configSETUP_TICK_INTERRUPT()
 * in FreeRTOSConfig.h to call the function.
 */
#define configSETUP_TICK_INTERRUPT() vConfigureTickInterrupt()
#define configCLEAR_TICK_INTERRUPT() vClearTickInterrupt()
#endif

/* The configPRE_SLEEP_PROCESSING() and configPOST_SLEEP_PROCESSING() macros
allow the application writer to add additional code before and after the MCU is
placed into the low power state respectively.  The empty implementations
provided in this demo can be extended to save even more power. */
#define configPRE_SLEEP_PROCESSING( uxExpectedIdleTime ) vPreSleepProcessing( uxExpectedIdleTime );
#define configPOST_SLEEP_PROCESSING( uxExpectedIdleTime ) vPostSleepProcessing( uxExpectedIdleTime );


/* Compiler specifics. */
#define fabs( x ) __builtin_fabs( x )

/* Enable Hardware Stack Protection and Recording mechanism. */
#define configHSP_ENABLE				0

/*Hardware stack protection for ISR can't support statically allocated IRQ_STACK*/
#if(configHSP_ENABLE == 1 && configISR_STACK_SIZE_WORDS == 0)
#define configISR_HSP_ENABLE				1
#endif

/* Record the highest address of stack. */
#if(configHSP_ENABLE == 1 && configRECORD_STACK_HIGH_ADDRESS != 1)
#define configRECORD_STACK_HIGH_ADDRESS			1
#endif

#define testwifiMAX_SCAN_NUMBER				2

#endif /* FREERTOS_CONFIG_H */

